package gameBoard;

import chessPieces.*;
import java.util.Scanner;



public class Board{
	int row, col = 0;
	public static CellType[][] cells;
	public static String prevPawn;
	
	
	
	public Board(){
		this.row = 9;
		this.col = 9;
		cells = new CellType[this.row][this.col];
	}
	
	
	
	
	
	public static int transRow(char num) {
		if(num == '1') {
			return 7;
		}else if (num == '2') {
			return 6;
		}else if (num == '3') {
			return 5;
		}else if (num == '4') {
			return 4;
		}else if (num == '5') {
			return 3;
		}else if (num == '6') {
			return 2;
		}else if (num == '7') {
			return 1;
		}else if (num == '8') {
			return 0;
		}
		
		return 69;
	}
	
	public static int transCol(char letter) {
		if(letter == 'a') {
			return 0;
		}else if (letter == 'b') {
			return 1;
		}else if (letter == 'c') {
			return 2;
		}else if (letter == 'd') {
			return 3;
		}else if (letter == 'e') {
			return 4;
		}else if (letter == 'f') {
			return 5;
		}else if (letter == 'g') {
			return 6;
		}else if (letter == 'h') {
			return 7 ;
		}
		
		return 69;
	}
	
	public void setBoard(Board b) {
		
		b.cells[0][0] = new Rook("bR", 1);
		b.cells[0][1] = new Knight("bN",1);
		b.cells[0][2] = new Bishop("bB",1);
		b.cells[0][3] = new Queen("bQ",1);
		b.cells[0][4] = new King("bK",1);
		b.cells[0][5] = new Bishop("bB",1);
		b.cells[0][6] = new Knight("bN",1);
		b.cells[0][7] = new Rook("bR",1);
		b.cells[0][8] = new Legend("8"); 
		
		b.cells[1][0] =  new Pawn("bp",1);
		b.cells[1][1] =  new Pawn("bp",1);
		b.cells[1][2] =  new Pawn("bp",1);
		b.cells[1][3] =  new Pawn("bp",1);
		b.cells[1][4] =  new Pawn("bp",1);
		b.cells[1][5] =  new Pawn("bp",1);
		b.cells[1][6] =  new Pawn("bp",1);
		b.cells[1][7] =  new Pawn("bp",1);
		b.cells[1][8] =  new Legend("7"); 
		
		b.cells[2][0] =  new BlankSpace("  ");
		b.cells[2][1] =  new BlankSpace("##");
		b.cells[2][2] =  new BlankSpace("  ");
		b.cells[2][3] =  new BlankSpace("##");
		b.cells[2][4] =  new BlankSpace("  ");
		b.cells[2][5] =  new BlankSpace("##");
		b.cells[2][6] =  new BlankSpace("  ");
		b.cells[2][7] =  new BlankSpace("##");
		b.cells[2][8] =  new Legend("6");
		
		b.cells[3][0] =  new BlankSpace("##");
		b.cells[3][1] =  new BlankSpace("  ");
		b.cells[3][2] =  new BlankSpace("##");
		b.cells[3][3] =  new BlankSpace("  ");
		b.cells[3][4] =  new BlankSpace("##");
		b.cells[3][5] =  new BlankSpace("  ");
		b.cells[3][6] =  new BlankSpace("##");
		b.cells[3][7] =  new BlankSpace("  ");
		b.cells[3][8] =  new Legend("5");
		
		b.cells[4][0] =  new BlankSpace("  ");
		b.cells[4][1] =  new BlankSpace("##");
		b.cells[4][2] =  new BlankSpace("  ");
		b.cells[4][3] =  new BlankSpace("##");
		b.cells[4][4] =  new BlankSpace("  ");
		b.cells[4][5] =  new BlankSpace("##");
		b.cells[4][6] =  new BlankSpace("  ");
		b.cells[4][7] =  new BlankSpace("##");
		b.cells[4][8] =  new Legend("4");
		
		b.cells[5][0] =  new BlankSpace("##");
		b.cells[5][1] =  new BlankSpace("  ");
		b.cells[5][2] =  new BlankSpace("##");
		b.cells[5][3] =  new BlankSpace("  ");
		b.cells[5][4] =  new BlankSpace("##");
		b.cells[5][5] =  new BlankSpace("  ");
		b.cells[5][6] =  new BlankSpace("##");
		b.cells[5][7] =  new BlankSpace("  ");
		b.cells[5][8] =  new Legend("3");
		
		b.cells[6][0] =  new Pawn("wp",0);
		b.cells[6][1] =  new Pawn("wp",0);
		b.cells[6][2] =  new Pawn("wp",0);
		b.cells[6][3] =  new Pawn("wp",0);
		b.cells[6][4] =  new Pawn("wp",0);
		b.cells[6][5] =  new Pawn("wp",0);
		b.cells[6][6] =  new Pawn("wp",0);
		b.cells[6][7] =  new Pawn("wp",0);
		b.cells[6][8] =  new Legend("2"); 
		
		b.cells[7][0] =  new Rook("wR",0);
		b.cells[7][1] =  new Knight("wN",0);
		b.cells[7][2] =  new Bishop("wB",0);
		b.cells[7][3] =  new Queen("wQ",0);
		b.cells[7][4] =  new King("wK",0);
		b.cells[7][5] =  new Bishop("wB",0);
		b.cells[7][6] =  new Knight("wN",0);
		b.cells[7][7] =  new Rook("wR",0);
		b.cells[7][8] =  new Legend("1"); 
		
		b.cells[8][0] =  new Legend("a");
		b.cells[8][1] =  new Legend("b");
		b.cells[8][2] =  new Legend("c");
		b.cells[8][3] =  new Legend("d");
		b.cells[8][4] =  new Legend("e");
		b.cells[8][5] =  new Legend("f");
		b.cells[8][6] =  new Legend("g");
		b.cells[8][7] =  new Legend("h");
		b.cells[8][8] =  new Legend(""); 
	}
	
	public void printBoard(Board b) {
		
		String cellTag = "";
		for (int i=0; i<b.row;i++) {
			for(int k=0;k<b.col;k++) {
				CellType cell = b.cells[i][k];
				
				if(cell instanceof Bishop || cell instanceof King || cell instanceof Knight || cell instanceof Pawn || cell instanceof Queen || cell instanceof Rook) {
					cellTag = ((GamePiece) b.cells[i][k]).getTag();
				}else if(cell instanceof BlankSpace) {
					cellTag = ((BlankSpace) b.cells[i][k]).getTag();
				}else if(cell instanceof Legend) {
					cellTag = ((Legend) b.cells[i][k]).getTag() + " ";
				}
				
				System.out.print(cellTag + " ");
			}
			System.out.println();
		}
		
		

	}

	
	public void getMove(Board b, String input, char pID){

		/*
		Scanner reader = new Scanner(System.in);
		System.out.print("White Move: ");	
		String n = reader.nextLine();
		
		while(n.length() != 5 || (n.charAt(0) == n.charAt(3) && n.charAt(1) == n.charAt(4)) || (n.charAt(0) < 'a') || (n.charAt(0) > 'h') || (n.charAt(3) < 'a') || (n.charAt(3) > 'h') || (n.charAt(1) < '1') || (n.charAt(1) > '8') || (n.charAt(4) < '1') || (n.charAt(4) > '8')) {
			System.out.println("Illegal move, try again");
			System.out.print("White Move: ");
			n = reader.nextLine();
		}
		*/
		
		
		String delim = "[ ]+";
		String[] tokens = input.split(delim);
		
		/*	print token check
		for (int i = 0; i < tokens.length; i++)
		    System.out.println(tokens[i]);
		*/
		
		char originLetter = tokens[0].charAt(0);
		char originNumber = tokens[0].charAt(1);
		
		char destLetter = tokens[1].charAt(0);
		char destNumber = tokens[1].charAt(1);
		
		
		//System.out.print("White Move: " + input);
		//System.out.println("original location letter: " + originLetter + " original location number: " + originNumber);
		//System.out.println("destination: " + destLetter + destNumber);
		
		
		
		
		//FIND CORRESPONDING ROW&COL for origin and destination
		//ISSUE NEEDING TO BE RESOLVED: doesn't equate to the correct result
		//char numerical value to integer might be the issue in conversion
		int originRow = transRow(originNumber);
		int originCol = transCol(originLetter);
		int destRow = transRow(destNumber);
		int destCol = transCol(destLetter);
		
		//System.out.println("Origin Location: " + originLetter + originNumber + " Actual RxC coordinates: " + originRow + originCol);
		//System.out.println("Destination: " + destLetter + destNumber + " Actual RxC coordinates: " + destRow + destCol);
		
		boolean isValidMove;
		boolean isFirstMovement;
		
		
		
		
		
		
		
		
		/*
		if (isValidMove == true){
			updateBoard();
		}else{
			System.out.println("Error, not a legal move.");

		}
		*/
		//TRY TO COMPARE OBJECT TYPE AND SEE IF VALID MOVE
		//GONNA PROBABLY SEPARATE INTO A NEW METHOD
		
		CellType currCell = b.cells[originRow][originCol];
		
		
		
		
		
		if (currCell instanceof BlankSpace)
			System.out.println("not valid");
		
		
		
	
		
		if(currCell instanceof Pawn){
			 boolean isEPcapturePREV = false;
			 boolean isEPcaptureNEXT = false;
			 char opPID;
			
			 isValidMove = (((Pawn) currCell).tryMove(tokens[0],tokens[1]) && (((((Pawn) currCell).whiteOrBlack == 0 ) && pID=='w') || ((((Pawn) currCell).whiteOrBlack == 1 ) && pID=='b')));
			
			
			isFirstMovement = ((Pawn) currCell).isFirstMove(tokens[0]);
			
			if(isFirstMovement == true){
				String prevOPPawn = tokens[1];
				//System.out.println("prevPawn Coords: " + prevOPPawn);
				System.out.println("this is the pawn's first move");
				
				
				//UPDATE THE BOARD
				if(!isValidMove){
					System.out.println("fail");
				}
				
					
				
				
				//allow other player to check if en passant
				CellType tempCell = b.cells[destRow][destCol-1];
				CellType tempCell2 = b.cells[destRow][destCol+1];
				
				//cast to char
				char a = (char)(destRow + '0');
				System.out.println("DestRow as a char: " + a);
				
				if ((destRow - originRow == 2) && tempCell instanceof Pawn){
					System.out.println("En Passant is possible in prev column " + (destCol-1));
					
					
					
					updateBoard(b, tokens[0], tokens[1], "Pawn", pID);
					isEPcapturePREV = true;
				}
				else if ((destRow - originRow == 2) && tempCell2 instanceof Pawn){
					System.out.println("En Passant is possible in column " + (destCol+1));
					updateBoard(b, tokens[0], tokens[1], "Pawn", pID);
					isEPcaptureNEXT = true;
				}else{
					System.out.println("En passant not valid");
					updateBoard(b, tokens[0], tokens[1], "Pawn", pID);
				}
				
				
			
				
				//prevOPPawn: stores previous pawn move
				//opPID: sends in opponents PID to make next move
				//tempCell: stores location of which pawn can potentially make EP capture
				if(isEPcapturePREV == true){
					String possEP_Pawn = "prevcol";
					System.out.println("lets fuckin do the EP shit on the left");
					//Let next player decide to do EP or not
					if(pID == 'w'){
						opPID = 'b';
					}else{
						opPID = 'w';
					}
					enPassant(b, prevOPPawn, opPID, possEP_Pawn);
				}
				else if(isEPcaptureNEXT == true){
					String possEP_Pawn = "nextcol";
					System.out.println("lets do this shit on the right");
					//Let next player decide to do EP or not
					if(pID == 'w'){
						opPID = 'b';
					}else{
						opPID = 'w';
					}
					enPassant(b, prevOPPawn, opPID, possEP_Pawn);
				
					
					
				}
				
			}	
			else{	//if not pawn's first time moving
				System.out.println("Not pawn's first move; En passant not valid");
				updateBoard(b, tokens[0], tokens[1], "Pawn", pID);
			}
					
			
		} else if(currCell instanceof Bishop){
			
			isValidMove = (((Bishop) currCell).tryMove(tokens[0],tokens[1]) && (((((Bishop) currCell).whiteOrBlack == 0 ) && pID=='w') || ((((Bishop) currCell).whiteOrBlack == 1 ) && pID=='b')));
			
			if(isValidMove){
				updateBoard(b, tokens[0], tokens[1], "Bishop", pID);
			}
			else
				System.out.println("fail");
			
		} else if(currCell instanceof King){
			
			isValidMove = (((King) currCell).tryMove(tokens[0],tokens[1]) && (((((King) currCell).whiteOrBlack == 0 ) && pID=='w') || ((((King) currCell).whiteOrBlack == 1 ) && pID=='b')));
			
			if(isValidMove){
				updateBoard(b, tokens[0], tokens[1], "King", pID);
			}
			else
				System.out.println("fail");
			
		}else if(currCell instanceof Queen){
			
			isValidMove = (((Queen) currCell).tryMove(tokens[0],tokens[1]) && (((((Queen) currCell).whiteOrBlack == 0 ) && pID=='w') || ((((Queen) currCell).whiteOrBlack == 1 ) && pID=='b')));
			
			if(isValidMove){
				updateBoard(b, tokens[0], tokens[1], "Queen", pID);
			}
			else
				System.out.println("fail");
			
		}else if(currCell instanceof Knight){
			
			isValidMove = (((Knight) currCell).tryMove(tokens[0],tokens[1]) && (((((Knight) currCell).whiteOrBlack == 0 ) && pID=='w') || ((((Knight) currCell).whiteOrBlack == 1 ) && pID=='b')));
			
			if(isValidMove){
				updateBoard(b, tokens[0], tokens[1], "Knight", pID);
			}
			else
				System.out.println("fail");
			
		}else if(currCell instanceof Rook){
			
			isValidMove = (((Rook) currCell).tryMove(tokens[0],tokens[1]) && (((((Rook) currCell).whiteOrBlack == 0 ) && pID=='w') || ((((Rook) currCell).whiteOrBlack == 1 ) && pID=='b')));
			
			if(isValidMove){
				 updateBoard(b, tokens[0], tokens[1], "Rook", pID);
			}
			else
				System.out.println("fail");
			
		}	
		//This checks if this movement results in a CheckMate to end the game
		//If isCheckmate() is true, then we close the input stream and end the game
	}
	
	
	
	public void enPassant(Board b, String prevPawnMove, char pID, String possEP_Pawn){
		
		System.out.println("WERE IN ENPASSANT HOE");
		System.out.println("previous pawn move coordinates: " + prevPawnMove);
		System.out.println("current player: " + pID);
		
		
		int prevPRow = transRow(prevPawnMove.charAt(1));
		int prevPCol = transCol(prevPawnMove.charAt(0));
		
		
		if(possEP_Pawn.equals("prevcol")){
			
			b.cells[prevPRow][prevPCol] = null;
			if(pID == 'w'){
				b.cells[prevPRow-1][prevPCol-1] = new Pawn("wp", 0);
				 updateBoard(b, tokens[0], tokens[1], "Pawn", pID);
			}
			else if(pID == 'b'){
				b.cells[prevPRow+1][prevPCol-1] = new Pawn("bp", 1);
			}
			
		}
		
		
		
		
		
	}
	
	
	
	public static boolean isCheckmate(Board b){
		
		//Scan board to see if in CheckMate position
		
		//if not in CheckMate
		return false;
		//else, return true!
	}
	
	
	//ROWS REFER TO LETTERS
	public void updateBoard(Board b, String curr, String next, String pieceType, char pID){
		
		int originRow = transRow(curr.charAt(1));
		int originCol = transCol(curr.charAt(0));
		int destRow = transRow(next.charAt(1));
		int destCol = transCol(next.charAt(0));
		//clear old cell
		System.out.println("\n");
		
		if((originRow == 2 || originRow == 4) && (originCol % 2 != 0))
			b.cells[originRow][originCol] = new BlankSpace("##");
		
		else if((originRow == 2 || originRow == 4) && (originCol % 2 == 0))
			b.cells[originRow][originCol] = new BlankSpace("  ");
		
		else if((originRow == 3 || originRow == 5) && (originCol % 2 == 0))
			b.cells[originRow][originCol] = new BlankSpace("##");
		
		else if((originRow == 3 || originRow == 5) && (originCol % 2 != 0))
			b.cells[originRow][originCol] = new BlankSpace("  ");
		
		else if((originRow == 0 || originRow == 6) && (originCol % 2 == 0))
			b.cells[originRow][originCol] = new BlankSpace("  ");
		
		else if((originRow == 0 || originRow == 6) && (originCol % 2 != 0))
			b.cells[originRow][originCol] = new BlankSpace("##");
		
		else if((originRow == 1 || originRow == 7) && (originCol % 2 != 0))
			b.cells[originRow][originCol] = new BlankSpace("  ");
		
		else if((originRow == 1 || originRow == 7) && (originCol % 2 == 0))
			b.cells[originRow][originCol] = new BlankSpace("##");
		
		
		
			
		//Update new cell 
		
		//Pawn Piece Update
		if(pieceType.equals("Pawn") && pID == 'w'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Pawn("wp", 0);
		}
		else if(pieceType.equals("Pawn") && pID == 'b'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Pawn("bp", 1);
		}
		
		//Bishop Piece Update
		if(pieceType.equals("Bishop") && pID == 'w'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Bishop("wB", 0);
		}
		else if(pieceType.equals("Bishop") && pID == 'b'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Bishop("bB", 1);
		}
		
		//Knight Piece Update
		if(pieceType.equals("Knight") && pID == 'w'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Knight("wN", 0);
		}
		else if(pieceType.equals("Knight") && pID == 'b'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Knight("bN", 1);
		}
		
		//Rook Piece Update
		if(pieceType.equals("Rook") && pID == 'w'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Rook("wR", 0);
		}
		else if(pieceType.equals("Rook") && pID == 'b'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Rook("bR", 1);
		}
		
		//Queen Piece Update
		if(pieceType.equals("Queen") && pID == 'w'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Queen("wQ", 0);
		}
		else if(pieceType.equals("Queen") && pID == 'b'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new Queen("bQ", 1);
		}
		
		//King Piece Update
		if(pieceType.equals("King") && pID == 'w'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new King("wK", 0);
		}
		else if(pieceType.equals("King") && pID == 'b'){
			b.cells[destRow][destCol] = null;
			b.cells[destRow][destCol] = new King("bK", 1);
		}
		
		
		
		
		
		
	}
	
	
	public static void main(String[] args) {
		
		String input;
		Board bo = new Board();
		boolean check = false;
		
		boolean whiteMoved = false;
		boolean blackMoved = false;
		
		Player white = new Player('w');
		Player black = new Player('b');
		//System.out.println("White ID is: " + white.getPlayerID());
		
		char wPID = white.getPlayerID();
		char bPID = black.getPlayerID();

		bo.setBoard(bo); 
		//bo.printBoard(bo);
		
	
		//NOTE: maybe a game loop until ischeckMate is true so that the game keeps getting moves and updating the board
	
		while(check == false){
			
			if(whiteMoved == false){
				bo.printBoard(bo);
				input = white.makeMove(wPID, check);
				
				
				if(input.equals("GameOver")){
					return;
				}
				
				if(input.length() > 5){
					String delim = "[ ]+";
					String[] tokens = input.split(delim);
					
					if(tokens[2].equals("draw?")){
						input = black.makeMove(bPID, check);
						if(input.equals("GameOver"))
							return;
					}
						
				}
				
					bo.getMove(bo, input, wPID);
					whiteMoved = true;
					blackMoved = false;
				
			}
			else if(blackMoved == false){
				bo.printBoard(bo);
				input = black.makeMove(bPID, check);
				
				if(input.equals("GameOver")){
					return;
				}
				
				if(input.length() > 5){
					String delim = "[ ]+";
					String[] tokens = input.split(delim);
					
					if(tokens[2].equals("draw?")){
						input = white.makeMove(wPID, check);
						if(input.equals("GameOver"))
							return;
					}
						
				}
				
					bo.getMove(bo, input, bPID);
					blackMoved = true;
					whiteMoved = false;
				
			}	
		
		}
		

	}

}